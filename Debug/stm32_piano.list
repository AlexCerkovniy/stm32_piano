
stm32_piano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800218c  0800218c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800218c  0800218c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800218c  0800218c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000001c  080021b0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080021b0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000925d  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c9  00000000  00000000  000292e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008aa  00000000  00000000  0002b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a7c  00000000  00000000  0002be8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b851  00000000  00000000  00042906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085de6  00000000  00000000  0004e157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ed0  00000000  00000000  000d3f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000d6e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002150 	.word	0x08002150

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002150 	.word	0x08002150

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb94 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f838 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f934 	bl	80003c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f876 	bl	800024c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000160:	f000 f8ac 	bl	80002bc <MX_TIM1_Init>

    /* USER CODE BEGIN 3 */
	  static uint32_t keyboard_state = 0;
	  static uint32_t keyboard_state_prev = 0;

	  keyboard_state_prev = keyboard_state;
 8000164:	4b16      	ldr	r3, [pc, #88]	; (80001c0 <main+0x74>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a16      	ldr	r2, [pc, #88]	; (80001c4 <main+0x78>)
 800016a:	6013      	str	r3, [r2, #0]
	  keyboard_state = keyboard_read();
 800016c:	f000 f9d0 	bl	8000510 <keyboard_read>
 8000170:	4603      	mov	r3, r0
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <main+0x74>)
 8000174:	6013      	str	r3, [r2, #0]

	  if(keyboard_state != keyboard_state_prev){
 8000176:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <main+0x74>)
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <main+0x78>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	429a      	cmp	r2, r3
 8000180:	d019      	beq.n	80001b6 <main+0x6a>
		  if(keyboard_state){
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <main+0x74>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d00f      	beq.n	80001aa <main+0x5e>
			  buzzer_play(240 + keyboard_get_key(keyboard_state) * 20, 20);
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <main+0x74>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f9fe 	bl	8000590 <keyboard_get_key>
 8000194:	4602      	mov	r2, r0
 8000196:	4613      	mov	r3, r2
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	4413      	add	r3, r2
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	33f0      	adds	r3, #240	; 0xf0
 80001a0:	2114      	movs	r1, #20
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 fa12 	bl	80005cc <buzzer_play>
 80001a8:	e001      	b.n	80001ae <main+0x62>
		  }
		  else{
			  buzzer_stop();
 80001aa:	f000 fa41 	bl	8000630 <buzzer_stop>
		  }

		  keyboard_state_prev = keyboard_state;
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <main+0x74>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <main+0x78>)
 80001b4:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(50);
 80001b6:	2032      	movs	r0, #50	; 0x32
 80001b8:	f000 fbc2 	bl	8000940 <HAL_Delay>
  {
 80001bc:	e7d2      	b.n	8000164 <main+0x18>
 80001be:	bf00      	nop
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	200000dc 	.word	0x200000dc

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 ff8d 	bl	80020f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fe3d 	bl	8000e88 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000214:	f000 fa16 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f8aa 	bl	800138c <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023e:	f000 fa01 	bl	8000644 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000250:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <MX_SPI1_Init+0x6c>)
 8000254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000256:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800025c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800025e:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000260:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000264:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000268:	2200      	movs	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <MX_SPI1_Init+0x68>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000274:	2200      	movs	r2, #0
 8000276:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_SPI1_Init+0x68>)
 800027a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800027e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000282:	2210      	movs	r2, #16
 8000284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000288:	2200      	movs	r2, #0
 800028a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_SPI1_Init+0x68>)
 800028e:	2200      	movs	r2, #0
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <MX_SPI1_Init+0x68>)
 8000294:	2200      	movs	r2, #0
 8000296:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <MX_SPI1_Init+0x68>)
 800029a:	220a      	movs	r2, #10
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <MX_SPI1_Init+0x68>)
 80002a0:	f001 f9d0 	bl	8001644 <HAL_SPI_Init>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002aa:	f000 f9cb 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000038 	.word	0x20000038
 80002b8:	40013000 	.word	0x40013000

080002bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b092      	sub	sp, #72	; 0x48
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	615a      	str	r2, [r3, #20]
 80002de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2220      	movs	r2, #32
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 ff05 	bl	80020f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ec:	4b33      	ldr	r3, [pc, #204]	; (80003bc <MX_TIM1_Init+0x100>)
 80002ee:	4a34      	ldr	r2, [pc, #208]	; (80003c0 <MX_TIM1_Init+0x104>)
 80002f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80002f2:	4b32      	ldr	r3, [pc, #200]	; (80003bc <MX_TIM1_Init+0x100>)
 80002f4:	220f      	movs	r2, #15
 80002f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f8:	4b30      	ldr	r3, [pc, #192]	; (80003bc <MX_TIM1_Init+0x100>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002fe:	4b2f      	ldr	r3, [pc, #188]	; (80003bc <MX_TIM1_Init+0x100>)
 8000300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000304:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000306:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <MX_TIM1_Init+0x100>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800030c:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_TIM1_Init+0x100>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000312:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_TIM1_Init+0x100>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000318:	4828      	ldr	r0, [pc, #160]	; (80003bc <MX_TIM1_Init+0x100>)
 800031a:	f001 fa17 	bl	800174c <HAL_TIM_PWM_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000324:	f000 f98e 	bl	8000644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000328:	2300      	movs	r3, #0
 800032a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000334:	4619      	mov	r1, r3
 8000336:	4821      	ldr	r0, [pc, #132]	; (80003bc <MX_TIM1_Init+0x100>)
 8000338:	f001 fe2e 	bl	8001f98 <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000342:	f000 f97f 	bl	8000644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000346:	2360      	movs	r3, #96	; 0x60
 8000348:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800034e:	2300      	movs	r3, #0
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000352:	2300      	movs	r3, #0
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800035a:	2300      	movs	r3, #0
 800035c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800035e:	2300      	movs	r3, #0
 8000360:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000366:	2200      	movs	r2, #0
 8000368:	4619      	mov	r1, r3
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <MX_TIM1_Init+0x100>)
 800036c:	f001 fb44 	bl	80019f8 <HAL_TIM_PWM_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000376:	f000 f965 	bl	8000644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800038e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <MX_TIM1_Init+0x100>)
 800039e:	f001 fe59 	bl	8002054 <HAL_TIMEx_ConfigBreakDeadTime>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80003a8:	f000 f94c 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <MX_TIM1_Init+0x100>)
 80003ae:	f000 f9dd 	bl	800076c <HAL_TIM_MspPostInit>

}
 80003b2:	bf00      	nop
 80003b4:	3748      	adds	r7, #72	; 0x48
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000090 	.word	0x20000090
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d8:	4b47      	ldr	r3, [pc, #284]	; (80004f8 <MX_GPIO_Init+0x134>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a46      	ldr	r2, [pc, #280]	; (80004f8 <MX_GPIO_Init+0x134>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b44      	ldr	r3, [pc, #272]	; (80004f8 <MX_GPIO_Init+0x134>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0310 	and.w	r3, r3, #16
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f0:	4b41      	ldr	r3, [pc, #260]	; (80004f8 <MX_GPIO_Init+0x134>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a40      	ldr	r2, [pc, #256]	; (80004f8 <MX_GPIO_Init+0x134>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <MX_GPIO_Init+0x134>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <MX_GPIO_Init+0x134>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a3a      	ldr	r2, [pc, #232]	; (80004f8 <MX_GPIO_Init+0x134>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b38      	ldr	r3, [pc, #224]	; (80004f8 <MX_GPIO_Init+0x134>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <MX_GPIO_Init+0x134>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a34      	ldr	r2, [pc, #208]	; (80004f8 <MX_GPIO_Init+0x134>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <MX_GPIO_Init+0x134>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KBD_A_Pin|KBD_B_Pin|KBD_C_Pin|KBD_D_Pin, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800043e:	482f      	ldr	r0, [pc, #188]	; (80004fc <MX_GPIO_Init+0x138>)
 8000440:	f000 fd0a 	bl	8000e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000444:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044a:	2303      	movs	r3, #3
 800044c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	482a      	ldr	r0, [pc, #168]	; (8000500 <MX_GPIO_Init+0x13c>)
 8000456:	f000 fb7b 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800045a:	2303      	movs	r3, #3
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800045e:	2303      	movs	r3, #3
 8000460:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	4826      	ldr	r0, [pc, #152]	; (8000504 <MX_GPIO_Init+0x140>)
 800046a:	f000 fb71 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800046e:	f649 635f 	movw	r3, #40543	; 0x9e5f
 8000472:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000474:	2303      	movs	r3, #3
 8000476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4619      	mov	r1, r3
 800047e:	4822      	ldr	r0, [pc, #136]	; (8000508 <MX_GPIO_Init+0x144>)
 8000480:	f000 fb66 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000484:	f640 6307 	movw	r3, #3591	; 0xe07
 8000488:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048a:	2303      	movs	r3, #3
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	4819      	ldr	r0, [pc, #100]	; (80004fc <MX_GPIO_Init+0x138>)
 8000496:	f000 fb5b 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_A_Pin KBD_B_Pin KBD_C_Pin KBD_D_Pin */
  GPIO_InitStruct.Pin = KBD_A_Pin|KBD_B_Pin|KBD_C_Pin|KBD_D_Pin;
 800049a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004a0:	2311      	movs	r3, #17
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2302      	movs	r3, #2
 80004aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	4812      	ldr	r0, [pc, #72]	; (80004fc <MX_GPIO_Init+0x138>)
 80004b4:	f000 fb4c 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_1_Pin KBD_2_Pin KBD_3_Pin KBD_4_Pin
                           KBD_5_Pin KBD_6_Pin */
  GPIO_InitStruct.Pin = KBD_1_Pin|KBD_2_Pin|KBD_3_Pin|KBD_4_Pin
 80004b8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80004bc:	617b      	str	r3, [r7, #20]
                          |KBD_5_Pin|KBD_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4619      	mov	r1, r3
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <MX_GPIO_Init+0x138>)
 80004ce:	f000 fb3f 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_GPIO_Init+0x148>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
 80004d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
 80004e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <MX_GPIO_Init+0x148>)
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ee:	bf00      	nop
 80004f0:	3728      	adds	r7, #40	; 0x28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	40011000 	.word	0x40011000
 8000504:	40011400 	.word	0x40011400
 8000508:	40010800 	.word	0x40010800
 800050c:	40010000 	.word	0x40010000

08000510 <keyboard_read>:

/* USER CODE BEGIN 4 */
uint32_t keyboard_coulumn_pin[] = {KBD_A_Pin, KBD_B_Pin, KBD_C_Pin, KBD_D_Pin};

uint32_t keyboard_read(void){
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
	 uint32_t tmp = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]

	 /* Scan keyboard in fast way */
	 for(uint16_t line = 0; line < 4; line++){
 800051a:	2300      	movs	r3, #0
 800051c:	817b      	strh	r3, [r7, #10]
 800051e:	e026      	b.n	800056e <keyboard_read+0x5e>
		 /* Reset all lines */
		 GPIOB->BSRR = KBD_A_Pin|KBD_B_Pin|KBD_C_Pin|KBD_D_Pin;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <keyboard_read+0x78>)
 8000522:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000526:	611a      	str	r2, [r3, #16]

		 /* Select line */
		 GPIOB->BSRR = keyboard_coulumn_pin[line] << 16;
 8000528:	897b      	ldrh	r3, [r7, #10]
 800052a:	4a18      	ldr	r2, [pc, #96]	; (800058c <keyboard_read+0x7c>)
 800052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000530:	4a15      	ldr	r2, [pc, #84]	; (8000588 <keyboard_read+0x78>)
 8000532:	041b      	lsls	r3, r3, #16
 8000534:	6113      	str	r3, [r2, #16]

		 /* Wait for a while */
		 for(volatile uint32_t wait = 0; wait < 1000; wait++);
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e002      	b.n	8000542 <keyboard_read+0x32>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3301      	adds	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000548:	d3f8      	bcc.n	800053c <keyboard_read+0x2c>

		 /* Read keys state port */
		 tmp |= (~GPIOB->IDR & (KBD_1_Pin|KBD_2_Pin|KBD_3_Pin|KBD_4_Pin|KBD_5_Pin|KBD_6_Pin)) >> 3;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <keyboard_read+0x78>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	43db      	mvns	r3, r3
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	4313      	orrs	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]

		 if(line < 3){
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d802      	bhi.n	8000568 <keyboard_read+0x58>
			 tmp <<= 6;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	60fb      	str	r3, [r7, #12]
	 for(uint16_t line = 0; line < 4; line++){
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	3301      	adds	r3, #1
 800056c:	817b      	strh	r3, [r7, #10]
 800056e:	897b      	ldrh	r3, [r7, #10]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d9d5      	bls.n	8000520 <keyboard_read+0x10>
		 }
	 }

	 /* Set all lines to idle */
	 GPIOB->BSRR = KBD_A_Pin|KBD_B_Pin|KBD_C_Pin|KBD_D_Pin;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <keyboard_read+0x78>)
 8000576:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800057a:	611a      	str	r2, [r3, #16]

	 return tmp;
 800057c:	68fb      	ldr	r3, [r7, #12]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40010c00 	.word	0x40010c00
 800058c:	20000000 	.word	0x20000000

08000590 <keyboard_get_key>:

uint32_t keyboard_get_key(uint32_t state){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint32_t keynum = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]

	if(!state) return;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00d      	beq.n	80005be <keyboard_get_key+0x2e>

	while(1){
		if(state & 0x01){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <keyboard_get_key+0x20>
			return keynum;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	e008      	b.n	80005c2 <keyboard_get_key+0x32>
		}

		state >>= 1;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	085b      	lsrs	r3, r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
		keynum++;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3301      	adds	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
		if(state & 0x01){
 80005bc:	e7f1      	b.n	80005a2 <keyboard_get_key+0x12>
	if(!state) return;
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
	}
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <buzzer_play>:

void buzzer_play(uint32_t freq, uint32_t volume){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	TIM1->ARR = (64000000/TIM1->PSC)/freq - 1;
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <buzzer_play+0x54>)
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <buzzer_play+0x58>)
 80005dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <buzzer_play+0x54>)
 80005e8:	3b01      	subs	r3, #1
 80005ea:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CCR1 = (volume * (((uint16_t)(TIM1->ARR))/2))/100;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <buzzer_play+0x54>)
 80005ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	085b      	lsrs	r3, r3, #1
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <buzzer_play+0x54>)
 8000600:	4909      	ldr	r1, [pc, #36]	; (8000628 <buzzer_play+0x5c>)
 8000602:	fba1 1303 	umull	r1, r3, r1, r3
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->EGR = TIM_EGR_UG;
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <buzzer_play+0x54>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000610:	2100      	movs	r1, #0
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <buzzer_play+0x60>)
 8000614:	f001 f8ea 	bl	80017ec <HAL_TIM_PWM_Start>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40012c00 	.word	0x40012c00
 8000624:	03d09000 	.word	0x03d09000
 8000628:	51eb851f 	.word	0x51eb851f
 800062c:	20000090 	.word	0x20000090

08000630 <buzzer_stop>:

void buzzer_stop(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000634:	2100      	movs	r1, #0
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <buzzer_stop+0x10>)
 8000638:	f001 f97a 	bl	8001930 <HAL_TIM_PWM_Stop>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000090 	.word	0x20000090

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_MspInit+0x5c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <HAL_MspInit+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x5c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <HAL_MspInit+0x5c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_MspInit+0x60>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_MspInit+0x60>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000

080006b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <HAL_SPI_MspInit+0x70>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d123      	bne.n	800071c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_SPI_MspInit+0x74>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <HAL_SPI_MspInit+0x74>)
 80006da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_SPI_MspInit+0x74>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_SPI_MspInit+0x74>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <HAL_SPI_MspInit+0x74>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_SPI_MspInit+0x74>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_SPI_MspInit+0x78>)
 8000718:	f000 fa1a 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013000 	.word	0x40013000
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_TIM_PWM_MspInit+0x34>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10b      	bne.n	800075a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 8000748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40012c00 	.word	0x40012c00
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d118      	bne.n	80007be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <HAL_TIM_MspPostInit+0x64>)
 80007ba:	f000 f9c9 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010800 	.word	0x40010800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f875 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
	...

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff fff7 	bl	8000822 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000836:	490c      	ldr	r1, [pc, #48]	; (8000868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <LoopFillZerobss+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800084c:	4c09      	ldr	r4, [pc, #36]	; (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f001 fc55 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fc75 	bl	800014c <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800086c:	08002194 	.word	0x08002194
  ldr r2, =_sbss
 8000870:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000874:	200000e4 	.word	0x200000e4

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f92b 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff feda 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f935 	bl	8000b36 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f90b 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000010 	.word	0x20000010
 8000900:	20000018 	.word	0x20000018
 8000904:	20000014 	.word	0x20000014

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_IncTick+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000018 	.word	0x20000018
 8000928:	200000e0 	.word	0x200000e0

0800092c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	200000e0 	.word	0x200000e0

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fff0 	bl	800092c <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffe0 	bl	800092c <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000018 	.word	0x20000018

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff49 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff5e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff90 	bl	8000a40 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5f 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffb0 	bl	8000aa4 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e169      	b.n	8000e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8158 	bne.w	8000e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4a9a      	ldr	r2, [pc, #616]	; (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d05e      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a98      	ldr	r2, [pc, #608]	; (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d875      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b92:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d058      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b98:	4a96      	ldr	r2, [pc, #600]	; (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d86f      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b9e:	4a96      	ldr	r2, [pc, #600]	; (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d052      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000ba4:	4a94      	ldr	r2, [pc, #592]	; (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d869      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000baa:	4a94      	ldr	r2, [pc, #592]	; (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d04c      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bb0:	4a92      	ldr	r2, [pc, #584]	; (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d863      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bb6:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d046      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bbc:	4a90      	ldr	r2, [pc, #576]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d85d      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d82a      	bhi.n	8000c1c <HAL_GPIO_Init+0xcc>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d859      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <HAL_GPIO_Init+0x80>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c4b 	.word	0x08000c4b
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c37 	.word	0x08000c37
 8000bdc:	08000c79 	.word	0x08000c79
 8000be0:	08000c7f 	.word	0x08000c7f
 8000be4:	08000c7f 	.word	0x08000c7f
 8000be8:	08000c7f 	.word	0x08000c7f
 8000bec:	08000c7f 	.word	0x08000c7f
 8000bf0:	08000c7f 	.word	0x08000c7f
 8000bf4:	08000c7f 	.word	0x08000c7f
 8000bf8:	08000c7f 	.word	0x08000c7f
 8000bfc:	08000c7f 	.word	0x08000c7f
 8000c00:	08000c7f 	.word	0x08000c7f
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c7f 	.word	0x08000c7f
 8000c0c:	08000c7f 	.word	0x08000c7f
 8000c10:	08000c7f 	.word	0x08000c7f
 8000c14:	08000c2d 	.word	0x08000c2d
 8000c18:	08000c41 	.word	0x08000c41
 8000c1c:	4a79      	ldr	r2, [pc, #484]	; (8000e04 <HAL_GPIO_Init+0x2b4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c22:	e02c      	b.n	8000c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e029      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3304      	adds	r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e024      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e01f      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	330c      	adds	r3, #12
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e01a      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c52:	2304      	movs	r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e013      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	611a      	str	r2, [r3, #16]
          break;
 8000c6a:	e009      	b.n	8000c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	615a      	str	r2, [r3, #20]
          break;
 8000c76:	e003      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          break;
 8000c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d801      	bhi.n	8000c8a <HAL_GPIO_Init+0x13a>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_Init+0x13e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d802      	bhi.n	8000c9c <HAL_GPIO_Init+0x14c>
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x152>
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	3b08      	subs	r3, #8
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	210f      	movs	r1, #15
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	6a39      	ldr	r1, [r7, #32]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce8:	4a48      	ldr	r2, [pc, #288]	; (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a40      	ldr	r2, [pc, #256]	; (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_GPIO_Init+0x1ec>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <HAL_GPIO_Init+0x2c4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1e8>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	; (8000e18 <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1e4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3d      	ldr	r2, [pc, #244]	; (8000e1c <HAL_GPIO_Init+0x2cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1e0>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e006      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d30:	2304      	movs	r3, #4
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4093      	lsls	r3, r2
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4e:	492f      	ldr	r1, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d006      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	492c      	ldr	r1, [pc, #176]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4928      	ldr	r1, [pc, #160]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	4922      	ldr	r1, [pc, #136]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60cb      	str	r3, [r1, #12]
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	491e      	ldr	r1, [pc, #120]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4918      	ldr	r1, [pc, #96]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4914      	ldr	r1, [pc, #80]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d021      	beq.n	8000e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	490e      	ldr	r1, [pc, #56]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e021      	b.n	8000e32 <HAL_GPIO_Init+0x2e2>
 8000dee:	bf00      	nop
 8000df0:	10320000 	.word	0x10320000
 8000df4:	10310000 	.word	0x10310000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10120000 	.word	0x10120000
 8000e04:	10110000 	.word	0x10110000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40011400 	.word	0x40011400
 8000e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_GPIO_Init+0x304>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4909      	ldr	r1, [pc, #36]	; (8000e54 <HAL_GPIO_Init+0x304>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f ae8e 	bne.w	8000b64 <HAL_GPIO_Init+0x14>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	372c      	adds	r7, #44	; 0x2c
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
 8000e64:	4613      	mov	r3, r2
 8000e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e68:	787b      	ldrb	r3, [r7, #1]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	041a      	lsls	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e272      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d00c      	beq.n	8000ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d112      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
 8000ec0:	4b8c      	ldr	r3, [pc, #560]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ece:	4b89      	ldr	r3, [pc, #548]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d168      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e24c      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x76>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e02e      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x98>
 8000f06:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7a      	ldr	r2, [pc, #488]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a77      	ldr	r2, [pc, #476]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e01d      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0xbc>
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6e      	ldr	r2, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a6a      	ldr	r2, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a67      	ldr	r2, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fce2 	bl	800092c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fcde 	bl	800092c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	; 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e200      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0xe4>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcce 	bl	800092c <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcca 	bl	800092c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1ec      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x10c>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d063      	beq.n	800108a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d11c      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e1c0      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4939      	ldr	r1, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	e03a      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_RCC_OscConfig+0x270>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fc83 	bl	800092c <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fc7f 	bl	800092c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1a1      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4927      	ldr	r1, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e015      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_RCC_OscConfig+0x270>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc62 	bl	800092c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fc5e 	bl	800092c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e180      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d03a      	beq.n	800110c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d019      	beq.n	80010d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_RCC_OscConfig+0x274>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc42 	bl	800092c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc3e 	bl	800092c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e160      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fa9c 	bl	8001608 <RCC_Delay>
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_RCC_OscConfig+0x274>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc28 	bl	800092c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010de:	e00f      	b.n	8001100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc24 	bl	800092c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d908      	bls.n	8001100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e146      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	42420000 	.word	0x42420000
 80010fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e9      	bne.n	80010e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a6 	beq.w	8001266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a87      	ldr	r2, [pc, #540]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b85      	ldr	r3, [pc, #532]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a7e      	ldr	r2, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fbe5 	bl	800092c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff fbe1 	bl	800092c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b64      	cmp	r3, #100	; 0x64
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e103      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b75      	ldr	r3, [pc, #468]	; (8001350 <HAL_RCC_OscConfig+0x4c8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x312>
 800118c:	4b6f      	ldr	r3, [pc, #444]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a6e      	ldr	r2, [pc, #440]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x334>
 80011a2:	4b6a      	ldr	r3, [pc, #424]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a69      	ldr	r2, [pc, #420]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b67      	ldr	r3, [pc, #412]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a66      	ldr	r2, [pc, #408]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	e01c      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d10c      	bne.n	80011de <HAL_RCC_OscConfig+0x356>
 80011c4:	4b61      	ldr	r3, [pc, #388]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a60      	ldr	r2, [pc, #384]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e00b      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a57      	ldr	r2, [pc, #348]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d015      	beq.n	800122a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fb95 	bl	800092c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fb91 	bl	800092c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0b1      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0ee      	beq.n	8001206 <HAL_RCC_OscConfig+0x37e>
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb7f 	bl	800092c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb7b 	bl	800092c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e09b      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	4b40      	ldr	r3, [pc, #256]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1ee      	bne.n	8001232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d061      	beq.n	8001340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d146      	bne.n	8001312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_RCC_OscConfig+0x4cc>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fb4f 	bl	800092c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fb4b 	bl	800092c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e06d      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4921      	ldr	r1, [pc, #132]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a19      	ldr	r1, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	430b      	orrs	r3, r1
 80012de:	491b      	ldr	r1, [pc, #108]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x4cc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb1f 	bl	800092c <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb1b 	bl	800092c <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e03d      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46a>
 8001310:	e035      	b.n	800137e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_RCC_OscConfig+0x4cc>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb08 	bl	800092c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fb04 	bl	800092c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e026      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x498>
 800133e:	e01e      	b.n	800137e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e019      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
 800134c:	40021000 	.word	0x40021000
 8001350:	40007000 	.word	0x40007000
 8001354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_OscConfig+0x500>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0d0      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d910      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4965      	ldr	r1, [pc, #404]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b63      	ldr	r3, [pc, #396]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0b8      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a58      	ldr	r2, [pc, #352]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	494d      	ldr	r1, [pc, #308]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d040      	beq.n	80014ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d115      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e073      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e06b      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 0203 	bic.w	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4936      	ldr	r1, [pc, #216]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800147c:	f7ff fa56 	bl	800092c <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	e00a      	b.n	800149a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff fa52 	bl	800092c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e053      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 020c 	and.w	r2, r3, #12
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1eb      	bne.n	8001484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d210      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4922      	ldr	r1, [pc, #136]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e032      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4916      	ldr	r1, [pc, #88]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	490e      	ldr	r1, [pc, #56]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151a:	f000 f821 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x1c8>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1cc>)
 8001534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f9b4 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000
 8001550:	40021000 	.word	0x40021000
 8001554:	08002168 	.word	0x08002168
 8001558:	20000010 	.word	0x20000010
 800155c:	20000014 	.word	0x20000014

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b04      	cmp	r3, #4
 8001588:	d002      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x30>
 800158a:	2b08      	cmp	r3, #8
 800158c:	d003      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x36>
 800158e:	e027      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001592:	613b      	str	r3, [r7, #16]
      break;
 8001594:	e027      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	0c5b      	lsrs	r3, r3, #17
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e004      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	613b      	str	r3, [r7, #16]
      break;
 80015de:	e002      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e6:	693b      	ldr	r3, [r7, #16]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	007a1200 	.word	0x007a1200
 80015fc:	08002178 	.word	0x08002178
 8001600:	08002188 	.word	0x08002188
 8001604:	003d0900 	.word	0x003d0900

08001608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <RCC_Delay+0x34>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <RCC_Delay+0x38>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001624:	bf00      	nop
  }
  while (Delay --);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <RCC_Delay+0x1c>
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000010 	.word	0x20000010
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e076      	b.n	8001744 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001666:	d009      	beq.n	800167c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
 800166e:	e005      	b.n	800167c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff f80c 	bl	80006b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001700:	ea42 0103 	orr.w	r1, r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	0c1a      	lsrs	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f002 0204 	and.w	r2, r2, #4
 8001722:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001732:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e041      	b.n	80017e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe ffdc 	bl	8000730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3304      	adds	r3, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f000 f9f6 	bl	8001b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_TIM_PWM_Start+0x24>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	bf14      	ite	ne
 8001808:	2301      	movne	r3, #1
 800180a:	2300      	moveq	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	e022      	b.n	8001856 <HAL_TIM_PWM_Start+0x6a>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b04      	cmp	r3, #4
 8001814:	d109      	bne.n	800182a <HAL_TIM_PWM_Start+0x3e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b01      	cmp	r3, #1
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	e015      	b.n	8001856 <HAL_TIM_PWM_Start+0x6a>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d109      	bne.n	8001844 <HAL_TIM_PWM_Start+0x58>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e008      	b.n	8001856 <HAL_TIM_PWM_Start+0x6a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e05e      	b.n	800191c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <HAL_TIM_PWM_Start+0x82>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800186c:	e013      	b.n	8001896 <HAL_TIM_PWM_Start+0xaa>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d104      	bne.n	800187e <HAL_TIM_PWM_Start+0x92>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800187c:	e00b      	b.n	8001896 <HAL_TIM_PWM_Start+0xaa>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b08      	cmp	r3, #8
 8001882:	d104      	bne.n	800188e <HAL_TIM_PWM_Start+0xa2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800188c:	e003      	b.n	8001896 <HAL_TIM_PWM_Start+0xaa>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fb56 	bl	8001f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_TIM_PWM_Start+0x138>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d107      	bne.n	80018be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_TIM_PWM_Start+0x138>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00e      	beq.n	80018e6 <HAL_TIM_PWM_Start+0xfa>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d009      	beq.n	80018e6 <HAL_TIM_PWM_Start+0xfa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_TIM_PWM_Start+0x13c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d004      	beq.n	80018e6 <HAL_TIM_PWM_Start+0xfa>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <HAL_TIM_PWM_Start+0x140>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d111      	bne.n	800190a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b06      	cmp	r3, #6
 80018f6:	d010      	beq.n	800191a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001908:	e007      	b.n	800191a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0201 	orr.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40000400 	.word	0x40000400
 800192c:	40000800 	.word	0x40000800

08001930 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fb04 	bl	8001f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <HAL_TIM_PWM_Stop+0xc4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d117      	bne.n	8001982 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1a      	ldr	r2, [r3, #32]
 8001958:	f241 1311 	movw	r3, #4369	; 0x1111
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_TIM_PWM_Stop+0x52>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	f240 4344 	movw	r3, #1092	; 0x444
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_TIM_PWM_Stop+0x52>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	f241 1311 	movw	r3, #4369	; 0x1111
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_TIM_PWM_Stop+0x82>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	f240 4344 	movw	r3, #1092	; 0x444
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_TIM_PWM_Stop+0x82>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <HAL_TIM_PWM_Stop+0x92>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c0:	e013      	b.n	80019ea <HAL_TIM_PWM_Stop+0xba>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d104      	bne.n	80019d2 <HAL_TIM_PWM_Stop+0xa2>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d0:	e00b      	b.n	80019ea <HAL_TIM_PWM_Stop+0xba>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d104      	bne.n	80019e2 <HAL_TIM_PWM_Stop+0xb2>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e0:	e003      	b.n	80019ea <HAL_TIM_PWM_Stop+0xba>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00

080019f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0ae      	b.n	8001b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	f200 809f 	bhi.w	8001b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a26:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a61 	.word	0x08001a61
 8001a30:	08001b65 	.word	0x08001b65
 8001a34:	08001b65 	.word	0x08001b65
 8001a38:	08001b65 	.word	0x08001b65
 8001a3c:	08001aa1 	.word	0x08001aa1
 8001a40:	08001b65 	.word	0x08001b65
 8001a44:	08001b65 	.word	0x08001b65
 8001a48:	08001b65 	.word	0x08001b65
 8001a4c:	08001ae3 	.word	0x08001ae3
 8001a50:	08001b65 	.word	0x08001b65
 8001a54:	08001b65 	.word	0x08001b65
 8001a58:	08001b65 	.word	0x08001b65
 8001a5c:	08001b23 	.word	0x08001b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f8ea 	bl	8001c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0208 	orr.w	r2, r2, #8
 8001a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6999      	ldr	r1, [r3, #24]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	619a      	str	r2, [r3, #24]
      break;
 8001a9e:	e064      	b.n	8001b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f930 	bl	8001d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6999      	ldr	r1, [r3, #24]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	021a      	lsls	r2, r3, #8
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	619a      	str	r2, [r3, #24]
      break;
 8001ae0:	e043      	b.n	8001b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f979 	bl	8001de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0208 	orr.w	r2, r2, #8
 8001afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0204 	bic.w	r2, r2, #4
 8001b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69d9      	ldr	r1, [r3, #28]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
      break;
 8001b20:	e023      	b.n	8001b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f9c3 	bl	8001eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69d9      	ldr	r1, [r3, #28]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	021a      	lsls	r2, r3, #8
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	61da      	str	r2, [r3, #28]
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	75fb      	strb	r3, [r7, #23]
      break;
 8001b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xb8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00b      	beq.n	8001bac <TIM_Base_SetConfig+0x30>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d007      	beq.n	8001bac <TIM_Base_SetConfig+0x30>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <TIM_Base_SetConfig+0xbc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d003      	beq.n	8001bac <TIM_Base_SetConfig+0x30>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <TIM_Base_SetConfig+0xc0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d108      	bne.n	8001bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <TIM_Base_SetConfig+0xb8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00b      	beq.n	8001bde <TIM_Base_SetConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bcc:	d007      	beq.n	8001bde <TIM_Base_SetConfig+0x62>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <TIM_Base_SetConfig+0xbc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d003      	beq.n	8001bde <TIM_Base_SetConfig+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <TIM_Base_SetConfig+0xc0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <TIM_Base_SetConfig+0xb8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d103      	bne.n	8001c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	615a      	str	r2, [r3, #20]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800

08001c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f023 0201 	bic.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f023 0302 	bic.w	r3, r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <TIM_OC1_SetConfig+0xc8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d10c      	bne.n	8001cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0308 	bic.w	r3, r3, #8
 8001ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <TIM_OC1_SetConfig+0xc8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d111      	bne.n	8001ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	621a      	str	r2, [r3, #32]
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40012c00 	.word	0x40012c00

08001d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f023 0210 	bic.w	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f023 0320 	bic.w	r3, r3, #32
 8001d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <TIM_OC2_SetConfig+0xd0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10d      	bne.n	8001d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <TIM_OC2_SetConfig+0xd0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d113      	bne.n	8001db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	621a      	str	r2, [r3, #32]
}
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40012c00 	.word	0x40012c00

08001de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <TIM_OC3_SetConfig+0xd0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10d      	bne.n	8001e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <TIM_OC3_SetConfig+0xd0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d113      	bne.n	8001e8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	621a      	str	r2, [r3, #32]
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	031b      	lsls	r3, r3, #12
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <TIM_OC4_SetConfig+0x98>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d109      	bne.n	8001f28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	621a      	str	r2, [r3, #32]
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40012c00 	.word	0x40012c00

08001f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2201      	movs	r2, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	621a      	str	r2, [r3, #32]
}
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e046      	b.n	800203e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d009      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10c      	bne.n	800202c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	4313      	orrs	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800

08002054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e03d      	b.n	80020ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <memset>:
 80020f6:	4603      	mov	r3, r0
 80020f8:	4402      	add	r2, r0
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d100      	bne.n	8002100 <memset+0xa>
 80020fe:	4770      	bx	lr
 8002100:	f803 1b01 	strb.w	r1, [r3], #1
 8002104:	e7f9      	b.n	80020fa <memset+0x4>
	...

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	2600      	movs	r6, #0
 800210c:	4d0c      	ldr	r5, [pc, #48]	; (8002140 <__libc_init_array+0x38>)
 800210e:	4c0d      	ldr	r4, [pc, #52]	; (8002144 <__libc_init_array+0x3c>)
 8002110:	1b64      	subs	r4, r4, r5
 8002112:	10a4      	asrs	r4, r4, #2
 8002114:	42a6      	cmp	r6, r4
 8002116:	d109      	bne.n	800212c <__libc_init_array+0x24>
 8002118:	f000 f81a 	bl	8002150 <_init>
 800211c:	2600      	movs	r6, #0
 800211e:	4d0a      	ldr	r5, [pc, #40]	; (8002148 <__libc_init_array+0x40>)
 8002120:	4c0a      	ldr	r4, [pc, #40]	; (800214c <__libc_init_array+0x44>)
 8002122:	1b64      	subs	r4, r4, r5
 8002124:	10a4      	asrs	r4, r4, #2
 8002126:	42a6      	cmp	r6, r4
 8002128:	d105      	bne.n	8002136 <__libc_init_array+0x2e>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002130:	4798      	blx	r3
 8002132:	3601      	adds	r6, #1
 8002134:	e7ee      	b.n	8002114 <__libc_init_array+0xc>
 8002136:	f855 3b04 	ldr.w	r3, [r5], #4
 800213a:	4798      	blx	r3
 800213c:	3601      	adds	r6, #1
 800213e:	e7f2      	b.n	8002126 <__libc_init_array+0x1e>
 8002140:	0800218c 	.word	0x0800218c
 8002144:	0800218c 	.word	0x0800218c
 8002148:	0800218c 	.word	0x0800218c
 800214c:	08002190 	.word	0x08002190

08002150 <_init>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	bf00      	nop
 8002154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002156:	bc08      	pop	{r3}
 8002158:	469e      	mov	lr, r3
 800215a:	4770      	bx	lr

0800215c <_fini>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	bf00      	nop
 8002160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002162:	bc08      	pop	{r3}
 8002164:	469e      	mov	lr, r3
 8002166:	4770      	bx	lr
